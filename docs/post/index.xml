<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Lost Among Notes</title>
    <link>http://blog.silvela.org/post/</link>
    <description>Recent content in Posts on Lost Among Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Mar 2016 06:52:29 +0100</lastBuildDate>
    <atom:link href="http://blog.silvela.org/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>And the Oscar goes to</title>
      <link>http://blog.silvela.org/post/2016-03-06-and-the-oscar-goes-to/</link>
      <pubDate>Sun, 06 Mar 2016 06:52:29 +0100</pubDate>
      
      <guid>http://blog.silvela.org/post/2016-03-06-and-the-oscar-goes-to/</guid>
      <description>&lt;p&gt;In order to prepare myself to write a program for clustering of numeric arrays,
I lived for two months in a numeric array.&lt;/p&gt;

&lt;p&gt;I got to understand the difficulties numbers face, being bunched
into clusters, and how they try to maintain their individual
identities and their dignity.&lt;/p&gt;

&lt;p&gt;Above all, my JavaScript code is an homage to them.
Thank you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SDE</title>
      <link>http://blog.silvela.org/post/2015-10-31-SDE/</link>
      <pubDate>Sat, 31 Oct 2015 10:23:32 +0200</pubDate>
      
      <guid>http://blog.silvela.org/post/2015-10-31-SDE/</guid>
      <description>&lt;p&gt;Software Development Engineer: &lt;strong&gt;Development&lt;/strong&gt; to make it sound more like &lt;strong&gt;management&lt;/strong&gt;. &lt;strong&gt;Engineer&lt;/strong&gt; so people don’t think you’re &lt;em&gt;in IT&lt;/em&gt; (gross!)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>You Know How This Ends</title>
      <link>http://blog.silvela.org/post/2015-10-30-you-know-how-this-ends/</link>
      <pubDate>Fri, 30 Oct 2015 10:23:32 +0200</pubDate>
      
      <guid>http://blog.silvela.org/post/2015-10-30-you-know-how-this-ends/</guid>
      <description>&lt;p&gt;I’m not much into superhero movies, but there is a particular plot device they use that I find fun: in the typical superhero movie, somewhere in the first half, the hero will get a chance to kill the bad guy, and he will not take it. Maybe he doesn’t yet grasp how dangerous this guy is.&lt;/p&gt;

&lt;p&gt;And you just know there will be a second act where the bad guy will wreak havoc, and then a final act where the hero will kill the villain, or send him to jail so that there can be a sequel.&lt;/p&gt;

&lt;p&gt;There is a particular class of bug that is like a movie supervillain. The first time you see it, it doesn’t seem like a bug at all. It’s just an odd little pattern, but it doesn’t seem threatening. “Oh, we’re getting duplicate log entries. Well, it’s just logs.” “The decimal expansions in this number array tend to repeat themselves often. Odd.”&lt;/p&gt;

&lt;p&gt;Because these things pose no clear danger, you put them aside. You’re not even working on that part of the code, anyway.
Perhaps you’re an experienced programmer, and you’ve learned to be suspicious of the shadows, and you make an annotation in your notebook; maybe you even add a TO-DO in your list, perhaps you add a FIX annotation on the source code.&lt;/p&gt;

&lt;p&gt;You get the picture. Inevitably, the next day, or the next week or month, something bad will happen. Something will break. And when you’ve gone through all the investigation and fixed several bugs, you’ll end up staring back at that oddity, which was at the root of everything. There might even be a TODO or FIX annotation next to it.&lt;/p&gt;

&lt;p&gt;And you’ll see it with new eyes. The bug will speak now. “Ah, we meet again! We’re not so different, you and I.” And you just know exactly how it’s going to end.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Coding Comfort</title>
      <link>http://blog.silvela.org/post/2015-08-14-coding-comfort/</link>
      <pubDate>Fri, 14 Aug 2015 10:23:32 +0200</pubDate>
      
      <guid>http://blog.silvela.org/post/2015-08-14-coding-comfort/</guid>
      <description>

&lt;p&gt;In the last year or so I&amp;rsquo;ve made a number of changes to my coding habits that
have had a positive impact on my comfort.&lt;/p&gt;

&lt;h3 id=&#34;touch-typing:29174e6573d62de44360ee1ddeb53e5c&#34;&gt;Touch typing&lt;/h3&gt;

&lt;p&gt;Some years ago, I read Steve Yegge&amp;rsquo;s popular post about touch-typing. His thesis
was that good programmers must be fast typists. As with much in his blog, I
thought it was self-indulgent crap. If your coding speed is limited by
your typing speed, something is very wrong with the way you work.&lt;/p&gt;

&lt;p&gt;Last year I learned to touch-type. I&amp;rsquo;m not a fast typist by any standard, but
touch typing has an enormous benefit for me: I don&amp;rsquo;t constantly switch my gaze
between screen and keyboard. This reduction of repetitive movement makes typing
a lot more enjoyable.&lt;/p&gt;

&lt;h3 id=&#34;mouse-is-better-than-keyboard-mouse-chording-is-a-super-power:29174e6573d62de44360ee1ddeb53e5c&#34;&gt;Mouse is better than keyboard. Mouse chording is a super power.&lt;/h3&gt;

&lt;p&gt;I had been an Emacs die-hard ever since learning Scheme in 1998. All that power
hidden within.
The Emacs way is to use the keyboard for everything. There are keyboard
shortcuts to jump back and forth, or to delete, by character, line, word,
paragraph. Mousing works, but it&amp;rsquo;s a bit clunky. For copying &amp;amp; pasting you&amp;rsquo;ll
more likely navigate and select with the keyboard, and use the keys for copying
and pasting (C-w, M-w and C-y, or, if you enable CUA mode (which you should)
C-x, C-c and C-v).
The keyboard culture is not unique to Emacs fans, of course.&lt;/p&gt;

&lt;p&gt;Then I learned to use the Acme editor, which was designed from the beginning to
take advantage of graphic displays and to use the mouse heavily.
Here&amp;rsquo;s some background on the &lt;a href=&#34;http://plan9.bell-labs.com/wiki/plan9/Mouse_vs._Keyboard/index.html&#34;&gt;merits of the mouse.&lt;/a&gt;
Acme uses mouse chording, a great idea that I haven&amp;rsquo;t seen used elsewhere. After
using mouse chording for a while, having to type all those commands seems so silly.
&lt;a href=&#34;http://research.swtch.com/acme&#34;&gt;Russ Cox has a great intro video to Acme and chording.&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;but-menus-suck:29174e6573d62de44360ee1ddeb53e5c&#34;&gt;But menus suck&lt;/h4&gt;

&lt;p&gt;All those modern programs with their multi-level menus and flashy toolbars. They
had better make sure that the most important commands are one click away.&lt;/p&gt;

&lt;h3 id=&#34;80-column-rule:29174e6573d62de44360ee1ddeb53e5c&#34;&gt;80 column rule&lt;/h3&gt;

&lt;p&gt;I used to think this was a silly rule. With our modern widescreen monitors, we
should be taking advantage of the extra screen real estate, no? Surely, Java
programmers need all the width they can get (the ergonomics of Java deserve a
dedicated  article).
Recently I decided to adopt the 80 column rule, and I can discern at least 3
benefits:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Code becomes simpler. That 4-level-deep control structure was asking to be
taken apart, and those long identifiers were too verbose.&lt;/li&gt;
&lt;li&gt;Side by side viewing/diffing becomes a lot easier.&lt;/li&gt;
&lt;li&gt;Your code can fit printed onto a page, using a monospaced font at normal
sizes. Which segues into &amp;hellip;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;font-size:29174e6573d62de44360ee1ddeb53e5c&#34;&gt;Font size&lt;/h3&gt;

&lt;p&gt;Many programmers brag about using one of those bitmapped programmer&amp;rsquo;s fonts at 8
or 9 pixels. OK, so they can fit more code on screen. They&amp;rsquo;re also ruining their
eyesight. To each his own.
I propose that you perform a little experiment: take some code that obeys the 80
column rule, with some long lines (78-80 cols.), and paste it into a word
processor. Use your favorite monospaced font, and set the font size as high as
possible, making sure the long lines don&amp;rsquo;t wrap.
Now print the page, and compare the code on screen and on page, keeping each at
the normal distance for you.
Try to match your screen font size to the printed font size. You will likely
need to increase it signifcantly.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve switched to the 80 column rule, and to large font size, recently. In the
beginning it seemed odd. Those fonts looked so big! Then I got used to it, and
after a while I started to notice the reduced strain on my eyes.
If you want to fit more lines of code into the screen, get a bigger screen;
don&amp;rsquo;t compromise on font size.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>It’s all zeros and ones</title>
      <link>http://blog.silvela.org/post/2015-04-18-zeros-and-ones/</link>
      <pubDate>Sat, 18 Apr 2015 10:23:32 +0200</pubDate>
      
      <guid>http://blog.silvela.org/post/2015-04-18-zeros-and-ones/</guid>
      <description>&lt;p&gt;That look of half-confusion, half-familiarity, when you tell people you’re a computer programmer. In the popular imagination, we programmers are “good with computers”. Perhaps some think that we have to do math to write programs. Others may have seen movies where the programmer is an over-caffeinated man-boy who types, and switches windows, at ludicrous speed. Of course, we’re all tired of friends asking us to fix their PowerPoint presentation.&lt;/p&gt;

&lt;p&gt;Then there are people with friends or family who program for a living. I’ve met a few of those, and in several cases, they’ve told me something like “In the end, for you guys, it’s all zeros and ones, right?”.
This sounds nice, and nicely baffling, but it’s not very useful. You could equally say of writers and journalists, that “in the end it’s all about letters and punctuation marks.”
I think the “zeros and ones” routine is cultivated by programmers who want to appear cool.&lt;/p&gt;

&lt;p&gt;So how does one describe the job of a programmer accurately, and shortly?
Not sure, but I have some ideas, mostly in the negative direction.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Computer programming is not mainly about computers. Your job did not change in a significant way when you switched to mac, and you can write programs that work even if you’re largely ignorant of computer architecture.&lt;/li&gt;
&lt;li&gt;Many people program who are not computer programmers. Writing Excel macros, using Matlab, even writing the odd SQL query, are routine for engineers, economists, biologists. Some of them indeed have “got it”, the programming gene, the skill to build big programs, the appreciation of code as an object in itself, to be studied and manipulated with purpose, rather than just chasing after the compiler.&lt;/li&gt;
&lt;li&gt;Conversely, some people who have a degree in CS, even a higher degree in CS, may not be programmers. They may be good at complexity theory, or security, or software project management, but they lack the practical know-how to get code off the ground.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think they key factor is the second one: seeing code as an object to be studied in its own right. One thing I love about computer programming is the importance of beauty. You work at your code to eliminate spurious complexity, to make it clearer, to make it smaller and easier to manipulate. And since code is the embodiment of your ideas about how to solve a problem, refining code goes hand in hand with a simpler and deeper understanding of the problem you’re solving. The simplifying impulse is not unique to computer programming, but computer programming makes simplification more critical than other fields.&lt;/p&gt;

&lt;p&gt;So, I think that the main job of the computer programmer is to reduce the complexity of methods to solve problems. It’s somewhat troubling that under that definition, most of us are failing miserably.&lt;/p&gt;

&lt;p&gt;If we were not in an industry where there’s money to be made, if we had all the time in the world, computer programmers would be zen masters.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Living with a computer language</title>
      <link>http://blog.silvela.org/post/2015-04-18-living-with-a-computer-language/</link>
      <pubDate>Sat, 18 Apr 2015 10:23:32 +0200</pubDate>
      
      <guid>http://blog.silvela.org/post/2015-04-18-living-with-a-computer-language/</guid>
      <description>&lt;p&gt;I’m not a big fan of David Lean’s movie “Doctor Zhivago”, but it contains a line I love:
“He approved of us, but for reasons which were subtle, like his verse.”&lt;/p&gt;

&lt;p&gt;The older I get, the more I become averse to the snap judgements that seem to pervade the software industry. I particularly hate the genre of the shootout article. It’s bad enough for web browser comparisons, but it’s terrible for everything else. When applied to languages, this philosophy gives rise to articles showing a strong preference for, say, Python over Ruby, on the grounds that a little toy project is 3 lines shorter, and 5% faster, in Python.&lt;/p&gt;

&lt;p&gt;In some cases, a language is clearly junk, but more often than not, it is unwise to make a language choice based on performance for your pet toy program. I&amp;rsquo;d go as far as saying that it takes months to get what a language is about. When you reach that point, it is likely that your complaints will be subtle, and poorly matched to a gladiatorial review.&lt;/p&gt;

&lt;p&gt;These days I&amp;rsquo;ve been using and liking the Go language. I&amp;rsquo;ve written a few programs in it, and I&amp;rsquo;m going to use it for my project at work. I look at this language with hope. I happen to think that the Java + XML + Patterns + TDD fundamentalism that has been ruling the software industry is a bleak place to be, and plain boring. Go is refreshingly pithy and idiosyncratic, and still a serious, typed, compiled language.
I ignore the language purists complaining about the lack of generics, or this or that pet peeve. I&amp;rsquo;ve been living with Go, and I&amp;rsquo;m keeping it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>White space in source code, or ditch monospace</title>
      <link>http://blog.silvela.org/post/2014-10-29-white-space-mono-space/</link>
      <pubDate>Wed, 29 Oct 2014 10:23:32 +0200</pubDate>
      
      <guid>http://blog.silvela.org/post/2014-10-29-white-space-mono-space/</guid>
      <description>&lt;p&gt;White space is very important for readability in general, and for readability of code in particular.
If you look at a book on typography, you’ll see discussions on line spacing, kerning, double spacing and other spatial concerns. For example, check &lt;a href=&#34;http://practicaltypography.com/&#34;&gt;Butterick’s Practical Typography&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Code is less dense on page than regular prose, but it is very compressed in comparison. Each and every letter and punctuation mark is important, each character must be clearly identifiable.
Many coders use monospaced typefaces to display their programs, and there are several monospaced typefaces designed specifically for code.&lt;/p&gt;

&lt;p&gt;Monospaced typefaces have peculiar problems. Because all their letterforms are made to fit the same width, the i’s and l’s are swimming in space, and the m’s and w’s are compressed. This can give rise to distracting changes in visual rhythm, or to letter collisions. In contrast, proportional fonts usually manage to keep a uniform density across the line:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.silvela.org/images/mono-problems.png&#34; alt=&#34;Issues with monospaced fonts&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Aside from their inherent problems, how do monospaced typefaces compare to proportional ones? Let’s look at the Bitstream Vera family, which contains proportional and monospaced fonts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.silvela.org/images/Bitstream_Vera_family.png&#34; alt=&#34;Bitstream Vera family&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The line set in Vera Mono, at the top, is very loose; looser than necessary, I find. My favorite rendering is the third one, with Vera Serif. In my opinion, it makes it much easier to tell what’s going on, and the letters are perfectly discernible.&lt;/p&gt;

&lt;p&gt;Why are so many programmers unwilling to use proportional typefaces? I think one important reason is that ever since C++, Java and CamelCase became the defaults, we’re used to long, un-spaced identifiers, and long lines of code. In those circumstances, the accidental whitespace patterns created by monospaced typefaces are a relief for the eye. Proportional typefaces can create bleak walls of text. &lt;br/&gt;Let’s compare Vera Mono vs. Vera Serif:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.silvela.org/images/no_underscores.png&#34; alt=&#34;Long lines of code (Vera fonts)&#34; /&gt;&lt;/p&gt;

&lt;p&gt;What would happen if we ditched CamelCase, and separated the sub-words with underscores? Let’s compare Vera Mono, with no underscores, vs. Vera Serif with underscores:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.silvela.org/images/underscores.png&#34; alt=&#34;Long lines, with underscores (Vera fonts)&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Much better, right? The spacing is deliberate, and the eye is drawn to the gaps within the identifiers. Even with the extra characters, the code set in Vera Serif is more compact than in Vera Mono.&lt;/p&gt;

&lt;p&gt;Many proportional typefaces are unsuitable for coding, but some are as good at distinguishing letters as any monospaced. For instance, Verdana, Charter, Bitstream Vera Serif (and its descendant DejaVu Serif), Clear Sans, ITC Officina Sans, the Input family…&lt;/p&gt;

&lt;p&gt;Should proportional typefaces be used for code? We’re all free to choose; after all, we each get our own monitor.
Here’s my take: a good proportional font, and judicious coding conventions, will improve the readability of your code base.
Watch your spaces!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fonts for coding</title>
      <link>http://blog.silvela.org/post/2014-10-23-fonts-for-coding/</link>
      <pubDate>Thu, 23 Oct 2014 10:23:32 +0200</pubDate>
      
      <guid>http://blog.silvela.org/post/2014-10-23-fonts-for-coding/</guid>
      <description>

&lt;p&gt;I’ve been on a typography bender lately. This is a quick summary of my findings.&lt;/p&gt;

&lt;h2 id=&#34;size-matters:bad670b96275d8d3c24f67916a4f0451&#34;&gt;Size matters&lt;/h2&gt;

&lt;p&gt;Some coders have a bit of a macho attitude  about making their coding font as small as possible, on the theory that the more lines of code you fit on a screen, the better. One often sees posts from coders claiming that Monaco, DejaVu, Consolas etc. at 9–10pt is their font of choice.&lt;/p&gt;

&lt;p&gt;Now that I’m approaching middle age, my eyes get tired more easily. I did a test: I printed some code onto a sheet of paper I could read comfortably. Then I compared it side by side against my monitor at regular distance. The results were shocking. For my setup (Mac Mini with a 21 inch screen), &lt;strong&gt;I need about 20pt font size to match regular printed letter size&lt;/strong&gt;. No wonder my eyes were getting tired!&lt;/p&gt;

&lt;h2 id=&#34;fonts-for-coding-criteria:bad670b96275d8d3c24f67916a4f0451&#34;&gt;Fonts for coding. Criteria&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Not necessarily monospaced!&lt;/li&gt;
&lt;li&gt;Renders well on your editor/OS.&lt;/li&gt;
&lt;li&gt;Distinct capital-i, lowercase-L and number-one. Good size of punctuation. Good size of brackets, braces, parens.
This disqualifies many sans-serif fonts, which often have similar characters. Some exceptions: Verdana, Clear Type, ITC Officina.&lt;/li&gt;
&lt;li&gt;Numbers are clearly distinct from letters. Notably, zero and one. Fonts with “old style figures” that don’t line up fail here. For example: Georgia, Hoefler Text.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;some-recommendations:bad670b96275d8d3c24f67916a4f0451&#34;&gt;Some recommendations&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.silvela.org/images/Font-comparison.png&#34; alt=&#34;Font comparison: Verdana, Input, OCR-F, Fira Mono&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Verdana is great. The characters are distinct, there is good spacing, punctuation and brackets/braces/parens are roomy.
But I find that the long, non-spaced, camel-cased identifiers often found in code, become forbiddingly dense when set in Verdana.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://input.fontbureau.com/preview&#34;&gt;Input Sans&lt;/a&gt;. A proportional font designed for coders! It gets everything right. Except … for some reason, I find it ugly. I keep noticing it when I use it, instead of it getting out of the way. I don’t know why. But do try it!
I hope Input Sans is a sign of things to come.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.fontfont.com/fonts/ocr-f&#34;&gt;FF OCR-F&lt;/a&gt;. This is a wonderful font. It’s proportional, and it keeps generous spacing between letters. More so than Verdana, and it avoids the cramped feeling for long non-spaced code. The only issue I have with it is that the font weights are extreme, either too light or too strong.&lt;/li&gt;
&lt;li&gt;My current favorite monospaced font: &lt;a href=&#34;http://mozilla.github.io/Fira/&#34;&gt;Fira Mono&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Parnas on software project management</title>
      <link>http://blog.silvela.org/post/2014-08-06-parnas-on-software-project-management/</link>
      <pubDate>Wed, 06 Aug 2014 10:54:46 +0200</pubDate>
      
      <guid>http://blog.silvela.org/post/2014-08-06-parnas-on-software-project-management/</guid>
      <description>&lt;p&gt;From Software Fundamentals. Collected Papers by David L. Parnas p. 604&lt;/p&gt;
&lt;q&gt;One of Mills’s most important lessons had to do with the difference between management and engineering. He did not try to tell us how to make unmanageable projects manageable. He showed us how to make projects manageable. He understood that only well-designed and well-documented projects could be managed properly; he taught us how to design products in ways that made management easier. Today, when so many papers discuss software engineering as if the problem was simply project management, I miss Harlan Mills.&lt;/q&gt;
</description>
    </item>
    
    <item>
      <title>Tabs,  spaces, fonts</title>
      <link>http://blog.silvela.org/post/2014-08-06-tabs-spaces-fonts/</link>
      <pubDate>Wed, 06 Aug 2014 10:23:32 +0200</pubDate>
      
      <guid>http://blog.silvela.org/post/2014-08-06-tabs-spaces-fonts/</guid>
      <description>&lt;p&gt;Spaces advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;read the same everywhere&lt;/li&gt;
&lt;li&gt;high precision in character placement&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tabs advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fewer keystrokes&lt;/li&gt;
&lt;li&gt;users can tailor display to their liking&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Either choice can be defended. They should not be mixed, however, as that destroys the advantages of both.&lt;/p&gt;
&lt;p&gt;Note that if we use proportional fonts, the advantages of spaces disappear. Spaces still give us more precision, but it’s not enough to guarantee proper vertical alignment.&lt;br /&gt;
So, use tabs if you use proportional fonts. Therefore, always use tabs, in case others view your code with proportional fonts. Therefore, don’t do fancy vertical alignment. Indent code using tabs as hierarchical markers.&lt;/p&gt;
&lt;p&gt;Precise vertical alignment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;will not work for proportional fonts&lt;/li&gt;
&lt;li&gt;for fixed fonts, it requires editor/ide magic to work well&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Be gone, fancy indentation. Be gone, auto-indent modes.&lt;br /&gt;
In a pinch, you can write code using any text editor.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Programming aesthetics</title>
      <link>http://blog.silvela.org/post/2014-08-03-programming-aesthetics/</link>
      <pubDate>Sun, 03 Aug 2014 11:22:42 +0200</pubDate>
      
      <guid>http://blog.silvela.org/post/2014-08-03-programming-aesthetics/</guid>
      <description>&lt;p&gt;In recent weeks, my outlook has changed quite a bit. With the (re)discovery of Plan 9 from user space, and Acme, via &lt;a href=&#34;http://research.swtch.com/acme&#34;&gt;Russ Cox’s intro video&lt;/a&gt;, I’ve been rethinking a lot of my assumptions on GUI’s, programming, and tools.&lt;br /&gt; I’ve also seen some talks by Rob Pike on youtube. It’s refreshing to see that the builders of UNIX offer incisive criticism of it, and had been developing alternatives since the 80s. In contrast, most of us now think Linux is the end-all.&lt;br /&gt; I’ve rethought many things. And shockingly I’m seeing emacs with new eyes. It’s been replaced by Acme as my editor of choice, after 15 years!&lt;/p&gt;
&lt;p&gt;Acme has nudged me into&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Indentation using TAB’s, with no spaces.&lt;/li&gt;
&lt;li&gt;Proportional fonts for programming.&lt;/li&gt;
&lt;li&gt;Easier argument-alignment rules.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once this trifecta is accepted, auto-indentation becomes superfluous. Much of the emacs complexity of modes, rendered useless.&lt;br /&gt; And Go is my new language to-learn.&lt;br /&gt; By the way, I’ve bought a 3 button mouse just to use with Acme. I think it’s worth it. As much as I like touchpads, tap-to-click makes selecting text clumsy.&lt;br /&gt; An interesting idea in Acme is the rampant manipulation of the cursor. When dragging a scroll control, it’s easy to mouse out of the scroll bar. Acme will keep it glued. Mac OS X / Win could learn a thing or two.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Xmonad &#43; GNOME</title>
      <link>http://blog.silvela.org/post/2010-09-19-xmonad-gnome/</link>
      <pubDate>Sun, 19 Sep 2010 06:07:06 +0200</pubDate>
      
      <guid>http://blog.silvela.org/post/2010-09-19-xmonad-gnome/</guid>
      <description>&lt;p&gt;I’m positively impressed with Linux lately, as I learn more.&lt;br /&gt;
By combining the tiling window manager Xmonad with the GNOME environment, I’ve found my favorite windowing system on any platform.&lt;/p&gt;
&lt;p&gt;I used these &lt;a href=&#34;http://markhansen.co.nz/xmonad-ubuntu-lucid&#34;&gt;basic instructions&lt;/a&gt;, but configured Xmonad to use the Window key (aka. Super key) as modifier instead of Alt, so that it doesn’t interfere with the Emacs keybindings. This is how it looks.&lt;br /&gt;
&lt;code&gt;&lt;br /&gt;
import XMonad&lt;br /&gt;
import XMonad.Config.Gnome&lt;/p&gt;
&lt;p&gt;main = xmonad gnomeConfig&lt;br /&gt;
              {&lt;br /&gt;
                modMask = mod4Mask&lt;br /&gt;
              }&lt;br /&gt;
&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Recording from vinyl with Inspire and Cubase</title>
      <link>http://blog.silvela.org/post/2009-09-03-recording-from-vinyl-with-inspire-and-cubase/</link>
      <pubDate>Thu, 03 Sep 2009 16:36:27 +0200</pubDate>
      
      <guid>http://blog.silvela.org/post/2009-09-03-recording-from-vinyl-with-inspire-and-cubase/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Connect the Inspire to the computer and the phono pre-amp&lt;/li&gt;
&lt;li&gt;Start the Inspire software and make sure channels 3-4 are unmuted and the volume is OK &lt;/li&gt;
&lt;li&gt;Start Cubase, do File =&amp;gt; New Project, and Project =&amp;gt; Add Track =&amp;gt; Audio&lt;/li&gt;
&lt;li&gt;Go to Devices =&amp;gt; Device Setup&lt;/li&gt;
&lt;li&gt;In the VST Audio System, choose the Inspire and hit OK&lt;/li&gt;
&lt;li&gt;Go to Devices =&amp;gt; VST Connections&lt;/li&gt;
&lt;li&gt;In the Input tab, choose channels 3 and 4 for input&lt;/li&gt;
&lt;li&gt;In the Output tab, choose channels 1 and 2 for output (connect your headphones to the Inspire, not the computer)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You will need to keep the Inspire connected at all times, even if you’re exporting a pre-recorded track to  AIFF!&lt;br /&gt;
With this you should be able to start recording.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Xmonad</title>
      <link>http://blog.silvela.org/post/2009-08-25-xmonad/</link>
      <pubDate>Tue, 25 Aug 2009 06:00:14 +0200</pubDate>
      
      <guid>http://blog.silvela.org/post/2009-08-25-xmonad/</guid>
      <description>&lt;p&gt;I like &lt;a href=&#34;http://xmonad.org/&#34;&gt;Xmonad&lt;/a&gt; much better than any other window manager (on any platform), but the default mod key is Alt, which interferes with Emacs and Conkeror.&lt;/p&gt;
&lt;p&gt;Here is how to &lt;a href=&#34;http://haskell.org/haskellwiki/Xmonad/Frequently%5Fasked%5Fquestions#Rebinding%5Fthe%5Fmod%5Fkey%5F.28Alt%5Fconflicts%5Fwith%5Fother%5Fapps.3B%5FI%5Fwant%5Fthe%5F%5F%5F%5F%5Fkey.21.29&#34;&gt;remap the mod key in Xmonad&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Or, locally copied on Aug 09:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
Binding to the mod4 (often &#39;Win&#39;) key. Put this in yout xmonad.hs:&lt;/p&gt;
&lt;p&gt;import XMonad&lt;/p&gt;
&lt;p&gt;main = xmonad defaultConfig&lt;br /&gt;
         {&lt;br /&gt;
           modMask = mod4Mask&lt;br /&gt;
         }
&lt;/p&gt;&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Scalar product and direction cosines</title>
      <link>http://blog.silvela.org/post/2008-12-08-scalar-product-and-direction-cosines/</link>
      <pubDate>Mon, 08 Dec 2008 09:12:17 +0100</pubDate>
      
      <guid>http://blog.silvela.org/post/2008-12-08-scalar-product-and-direction-cosines/</guid>
      <description>&lt;p&gt;When I learned about the scalar product in high school, I was somewhat surprised by how lucky its properties are.&lt;br /&gt;
The treatment is usually this: define $latex  x \cdot y = |x| |y| \cos \theta $, where $latex \theta $ is the angle between $latex x $ and $latex y $. Then deduce that $latex x \cdot y $ is linear on the left and right arguments. Then, deduce that $latex (x_1 \vec i + x_2 \vec j + x_3 \vec k) \cdot (y_1 \vec i + y_2 \vec j + y_3 \vec k)  = x_1 y_1 + x_2 y_2 + x_3 y_3 $&lt;/p&gt;
&lt;p&gt;Now, define the direction cosines of a vector $latex x $ as the cosines of the angles the vector forms with the basis vectors. By definition: $latex x = |x| (\cos \phi_1, \cos \phi_2, \cos \phi_3) $.&lt;br /&gt;
If we define $latex \theta $ as the angle between $latex x $ and $latex y $, $latex \alpha_i $ as the angles between $latex x $ and the axis, and $latex \beta_i $ as the angles between $latex y $ and the axis, we have: $latex \cos \theta = \sum_i \cos \alpha_i \cos \beta_i $.&lt;/p&gt;
&lt;p&gt;This last formula mystified me. The deduction was so purely algebraic that I found it unsatisfactory. I wanted to see the geometric meaning.&lt;/p&gt;
&lt;p&gt;A more geometric deduction follows: $latex (\cos \alpha_1, \cos \alpha_2, \cos \alpha_3) $ is a point $latex a $ on the unit sphere. If we take another point $latex b $ on the unit sphere, the subtend an angle $latex \theta $:&lt;br /&gt;
&lt;img src=&#34;http://blog.silvela.org/images/432576072_eyeTJ-S.jpg&#34; alt=&#34;On the unit sphere&#34; /&gt;&lt;/p&gt;
&lt;p&gt;On the unit sphere, we can find the angle $latex \theta $ subtended by $latex a $ and $latex b $, by calculating the distance $latex l $ between them:&lt;br /&gt;
&lt;img src=&#34;http://blog.silvela.org/images/432576073_8QviV-S.jpg&#34; alt=&#34;Calculating the angle&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see in the picture, $latex l = 2 \sin \frac{\theta}{2} $. Therefore: $latex 2 \sin \frac{\theta}{2} = \sqrt (\sum (\cos \alpha_i - \cos \beta_i)^2 $&lt;br /&gt;
By basic trigonometry: $latex \sin \frac{\theta}{2} = \sqrt \frac{1 - \cos \theta}{2}$&lt;/p&gt;
&lt;p&gt;Putting the above two together: $latex 4 \frac{1 - \cos \theta}{2} = \sum (\cos \alpha_i - \cos \beta_i)^2  = \sum (\cos^2 \alpha_i - 2 \cos \alpha_i \cos \beta_i + \cos^2 \beta_i)$&lt;br /&gt;
Since $latex a $ and $latex b $ are both on the unit sphere: $latex 4 \frac{1 - \cos \theta}{2} = 2 - \sum 2 \cos \alpha_i \cos \beta_i $,&lt;br /&gt;
and $latex \cos \theta = \sum \cos \alpha_i \cos \beta_i$&lt;/p&gt;
&lt;p&gt;In this deduction of $latex \cos \theta $, we didn’t assume any knowledge of the scalar product. In fact, we could have used it as a basis for the definition of the scalar product.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>